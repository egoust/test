heat_template_version: 2015-04-30
 
parameters:

  policy:    
    type: string
  service_template:    
    type: string
  vn_right:
    type: string
    label: Right virtual network
  subnets:    
    type: json  
  allow_transit:
    type: boolean
    default: False    
  forwarding_mode:
    type: string
    label: Forwarding mode for virtual networks 
    constraints:
      - allowed_values: [l2_l3, l2, l3]
    default: "l2_l3"
  rpf:
    type: string
    constraints:
      - allowed_values: [enable, disable]
    default: "disable"
  sfcgw_left_parent_interface:
    type: string
    label: Left SFCGW parent port 
    description: ID or FQDN of an existing port
  sfcgw_left_mac_address:
    type: string
    label: Left SFCGW subinterface MAC address
  sfcgw_left_sub_ip_address:
    type: string
    label: Left SFCGW subinterface IP Address   
  vnf_left_parent_interface:
    type: string
    label: Left vSRX parent port 
    description: ID or FQDN of an existing port
  vnf_left_mac_address:
    type: string
    label: Left vSRX subinterface MAC address
  vnf_left_sub_ip_address:
    type: string
    label: Left vSRX subinterface IP Address   
  vnf_right_parent_interface:
    type: string
    label: Right vSRX parent port 
    description: ID or FQDN of an existing port 
  vnf_right_mac_address:
    type: string
    label: Right vSRX subinterface MAC address
  vnf_right_sub_ip_address:
    type: string
    label: Right vSRX subinterface IP Address      
  vlan_tag:
    type: string
    label: VLAN tag
  routes:    
    type: json
    default: []
 
resources:

  route_table:
    type: OS::ContrailV2::RouteTable
    properties:
      name:         
        str_replace:
          template: left_$vlan_routes
          params:
           $vlan: {get_param: vlan_tag}
      routes:
        routes_route: { get_param: routes }  
 
  vn_left:
    type: OS::ContrailV2::VirtualNetwork
    depends_on: [ route_table ]     
    properties:
      name:         
        str_replace:
          template: left_$vlan
          params:
           $vlan: {get_param: vlan_tag}
      route_table_refs: [{ get_resource: route_table }]
      network_ipam_refs: ["default-domain:default-project:default-network-ipam"]
      network_ipam_refs_data:
          [{ network_ipam_refs_data_ipam_subnets: { get_param: subnets } }]
      virtual_network_properties:
        virtual_network_properties_allow_transit: { get_param: allow_transit }
        virtual_network_properties_forwarding_mode: { get_param: forwarding_mode }
        virtual_network_properties_rpf: { get_param: rpf }
      network_policy_refs: [{ get_param: policy }]
      network_policy_refs_data:
        [{
          network_policy_refs_data_sequence:
            {
              network_policy_refs_data_sequence_major: 0,
              network_policy_refs_data_sequence_minor: 0,
            },
        }]
        
  ServiceInstance:
    type: OS::ContrailV2::ServiceInstance
    depends_on: [ vn_left ] 
    properties:
      name:
        str_replace:
          template: VNF_$vlan
          params:
           $vlan: {get_param: vlan_tag}
      service_instance_properties:
        {
          service_instance_properties_ha_mode: "active-active",
          service_instance_properties_interface_list:
            [
              {
              service_instance_properties_interface_list_virtual_network:
                {
                  list_join: [':', { get_attr: [ vn_left, fq_name ] } ]
                },
              },
              {
              service_instance_properties_interface_list_virtual_network:
                {
                  get_param: vn_right
                },
              },
            ],
        }
      service_template_refs: [{ get_param: service_template }]
 
  PortTuple:
    type: OS::ContrailV2::PortTuple
    depends_on: [ ServiceInstance ]
    properties:
      service_instance: { list_join: [':', { get_attr: [ ServiceInstance, fq_name ] } ] }
 
  if_left:
    type: OS::ContrailV2::VirtualMachineInterface
    depends_on: [ PortTuple ]
    properties:
      name:
        str_replace:
          template: VNF_Port_Left_Sibif_$vlan
          params:
           $vlan: {get_param: vlan_tag}
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: "left",
        }
      port_tuple_refs: [{ get_resource: PortTuple }]
      virtual_network_refs: [{ list_join: [':', { get_attr: [ vn_left, fq_name ] } ] }]
      virtual_machine_interface_refs: [{ get_param: vnf_left_parent_interface }]
      virtual_machine_interface_properties:
        virtual_machine_interface_properties_sub_interface_vlan_tag: { get_param: vlan_tag }
      virtual_machine_interface_mac_addresses:
        virtual_machine_interface_mac_addresses_mac_address: [{ get_param: vnf_left_mac_address }]
   
  if_right:
    type: OS::ContrailV2::VirtualMachineInterface
    depends_on: [ PortTuple ]
    properties:
      name:
        str_replace:
          template: VNF_Port_Right_Sibif_$vlan
          params:
           $vlan: {get_param: vlan_tag}
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: "right",
        }
      port_tuple_refs: [{ get_resource: PortTuple }]
      virtual_network_refs: [{ get_param: vn_right }]
      virtual_machine_interface_refs: [{ get_param: vnf_right_parent_interface }]
      virtual_machine_interface_properties:
        virtual_machine_interface_properties_sub_interface_vlan_tag: { get_param: vlan_tag }
      virtual_machine_interface_mac_addresses:
        virtual_machine_interface_mac_addresses_mac_address: [{ get_param: vnf_right_mac_address }]

  if_sfcgw_left:
    type: OS::ContrailV2::VirtualMachineInterface
    depends_on: [ vn_left ]
    properties:
      name:
        str_replace:
          template: SFC_Port_Left_Sibif_$vlan
          params:
           $vlan: {get_param: vlan_tag}
      virtual_network_refs: [{ list_join: [':', { get_attr: [ vn_left, fq_name ] } ] }]
      virtual_machine_interface_refs: [{ get_param: sfcgw_left_parent_interface }]
      virtual_machine_interface_properties:
        virtual_machine_interface_properties_sub_interface_vlan_tag: { get_param: vlan_tag }
      virtual_machine_interface_mac_addresses:
        virtual_machine_interface_mac_addresses_mac_address: [{ get_param: sfcgw_left_mac_address }]
           
  if_left_IP:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ if_left, vn_left ]
    properties:
      instance_ip_address: { get_param: vnf_left_sub_ip_address }
      virtual_machine_interface_refs: [{ get_resource: if_left }]
      virtual_network_refs: [{ list_join: [':', { get_attr: [ vn_left, fq_name ] } ] }]
 
  if_right_IP:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ if_right ]
    properties:
      instance_ip_address: { get_param: vnf_right_sub_ip_address }
      virtual_machine_interface_refs: [{ get_resource: if_right }]
      virtual_network_refs: [{ get_param: vn_right }]

  if_sfcgw_left_IP:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ if_sfcgw_left ]
    properties:
      instance_ip_address: { get_param: sfcgw_left_sub_ip_address }
      virtual_machine_interface_refs: [{ get_resource: if_sfcgw_left }]
      virtual_network_refs: [{ list_join: [':', { get_attr: [ vn_left, fq_name ] } ] }]
      
  NetworkPolicy:
    type: OS::ContrailV2::NetworkPolicy
    depends_on: [ vn_left ]
    properties:
      name:
        str_replace:
          template: left_$vlan-to-right
          params:
           $vlan: { get_param: vlan_tag }
      network_policy_entries: { 
        network_policy_entries_policy_rule: [{ 
          network_policy_entries_policy_rule_direction: "<>",
          network_policy_entries_policy_rule_protocol: "any",
          network_policy_entries_policy_rule_src_ports: [{
            network_policy_entries_policy_rule_src_ports_start_port: -1,
            network_policy_entries_policy_rule_src_ports_end_port: -1
                                }],
          network_policy_entries_policy_rule_dst_ports: [{
            network_policy_entries_policy_rule_dst_ports_start_port: -1,
            network_policy_entries_policy_rule_dst_ports_end_port: -1
                                }],    
          network_policy_entries_policy_rule_dst_addresses: [{
            network_policy_entries_policy_rule_dst_addresses_virtual_network: { get_param: vn_right }
                                }],
          network_policy_entries_policy_rule_src_addresses: [{
            network_policy_entries_policy_rule_src_addresses_virtual_network: { list_join: [':', { get_attr: [ vn_left, fq_name ] } ] }
                                }],
          network_policy_entries_policy_rule_action_list: { 
            network_policy_entries_policy_rule_action_list_simple_action: "pass",
            network_policy_entries_policy_rule_action_list_apply_service: [{ list_join: [':', { get_attr: [ ServiceInstance, fq_name ] } ] }]
                                    }
        }]
      } 
      
outputs:

  service_instance_show:
    value: {get_attr: [ServiceInstance, show]}
  network_policy_show:
    value: {get_attr: [NetworkPolicy, show]}
  vn_left_show:
    value: {get_attr: [vn_left, show]}